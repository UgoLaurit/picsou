datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AccountType {
  checking
  savings
  credit_card
  loan
  investment
  cash
}

enum GoalType {
  required
  wanted
}

enum TransactionType {
  income
  expense
  transfer
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts              Account[]
  categories           Category[]
  buckets             Bucket[]
  bucketGoals         BucketGoal[]
  transactions        Transaction[]
  recurringTransactions RecurringTransaction[]

  @@map("users")
}

model Account {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  name      String
  type      AccountType
  balance   Decimal     @db.Decimal(12, 2) @default(0)
  currency  String      @default("EUR")
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  outgoingTransactions Transaction[] @relation("FromAccount")
  incomingTransactions Transaction[] @relation("ToAccount")
  outgoingRecurring    RecurringTransaction[] @relation("FromRecurringAccount")
  incomingRecurring    RecurringTransaction[] @relation("ToRecurringAccount")

  @@unique([userId, name])
  @@map("accounts")
}

model Category {
  id        String          @id @default(uuid())
  userId    String          @map("user_id")
  name      String
  type      TransactionType
  isActive  Boolean         @default(true) @map("is_active")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  buckets   Bucket[]

  @@unique([userId, name])
  @@map("categories")
}

model Bucket {
  id          String    @id @default(uuid())
  categoryId  String    @map("category_id")
  userId      String    @map("user_id")
  name        String
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals       BucketGoal[]
  transactions Transaction[]
  recurringTransactions RecurringTransaction[]

  @@unique([userId, categoryId, name])
  @@map("buckets")
}

model BucketGoal {
  id                String    @id @default(uuid())
  bucketId         String    @map("bucket_id")
  userId           String    @map("user_id")
  amount           Decimal   @db.Decimal(12, 2)
  type             GoalType
  startDate        DateTime  @map("start_date")
  endDate          DateTime  @map("end_date")
  isRecurring      Boolean   @default(false) @map("is_recurring")
  recurrenceInterval String? @map("recurrence_interval")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  bucket           Bucket    @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bucketId, startDate, endDate])
  @@map("bucket_goals")
}

model Transaction {
  id            String          @id @default(uuid())
  userId        String          @map("user_id")
  type          TransactionType
  amount        Decimal         @db.Decimal(12, 2)
  date          DateTime        @db.Date
  description   String?
  notes         String?
  bucketId      String?         @map("bucket_id")
  fromAccountId String?         @map("from_account_id")
  toAccountId   String?         @map("to_account_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bucket        Bucket?         @relation(fields: [bucketId], references: [id])
  fromAccount   Account?        @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount     Account?        @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("transactions")
}

model RecurringTransaction {
  id               String          @id @default(uuid())
  userId           String          @map("user_id")
  type             TransactionType
  amount           Decimal         @db.Decimal(12, 2)
  description      String?
  notes            String?
  bucketId         String?         @map("bucket_id")
  fromAccountId    String?         @map("from_account_id")
  toAccountId      String?         @map("to_account_id")
  frequency        String
  startDate        DateTime        @map("start_date")
  endDate          DateTime?       @map("end_date")
  lastGeneratedDate DateTime?      @map("last_generated_date")
  isActive         Boolean         @default(true) @map("is_active")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bucket           Bucket?         @relation(fields: [bucketId], references: [id])
  fromAccount      Account?        @relation("FromRecurringAccount", fields: [fromAccountId], references: [id])
  toAccount        Account?        @relation("ToRecurringAccount", fields: [toAccountId], references: [id])

  @@map("recurring_transactions")
} 