datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AccountType {
  checking
  savings
  loan
  investment
}

enum GoalType {
  required
  wanted
}

enum TransactionType {
  income
  expense
  transfer
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  image    String?
  accounts Account[]
  categories Category[]
  subcategories Subcategory[]
  goals SubcategoryGoal[]
  transactions Transaction[]
  recurringTransactions RecurringTransaction[]

  @@map("users")
}

model Category {
  id            String       @id @default(uuid())
  name          String
  type          TransactionType
  userId        String       @map("user_id")
  subcategories Subcategory[]
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("categories")
}

model Subcategory {
  id          String       @id @default(uuid())
  name        String
  categoryId  String       @map("category_id")
  userId      String       @map("user_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals       SubcategoryGoal[]
  transactions Transaction[]
  recurringTransactions RecurringTransaction[]

  @@unique([userId, categoryId, name])
  @@map("subcategories")
}

model Account {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  name               String
  type               AccountType
  balance            Decimal  @db.Decimal(12, 2)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromTransactions   Transaction[] @relation("FromAccount")
  toTransactions     Transaction[] @relation("ToAccount")
  fromRecurring      RecurringTransaction[] @relation("FromAccount")
  toRecurring        RecurringTransaction[] @relation("ToAccount")

  @@map("accounts")
}

model SubcategoryGoal {
  id                String    @id @default(uuid())
  userId           String    @map("user_id")
  subcategoryId    String    @map("subcategory_id")
  amount           Decimal   @db.Decimal(12, 2)
  type             GoalType
  startDate        DateTime  @map("start_date")
  endDate          DateTime? @map("end_date")
  isRecurring      Boolean   @default(false) @map("is_recurring")
  recurrenceInterval String? @map("recurrence_interval")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory      Subcategory @relation(fields: [subcategoryId], references: [id])

  @@map("subcategory_goals")
}

model Transaction {
  id            String          @id @default(uuid())
  userId        String          @map("user_id")
  type          TransactionType
  amount        Decimal         @db.Decimal(12, 2)
  date          DateTime        @db.Date
  description   String?
  notes         String?
  subcategoryId String?         @map("subcategory_id")
  fromAccountId String?         @map("from_account_id")
  toAccountId   String?         @map("to_account_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory   Subcategory?    @relation(fields: [subcategoryId], references: [id])
  fromAccount   Account?        @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount     Account?        @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("transactions")
}

model RecurringTransaction {
  id               String          @id @default(uuid())
  userId           String          @map("user_id")
  type             TransactionType
  amount           Decimal         @db.Decimal(12, 2)
  description      String?
  notes            String?
  subcategoryId    String?         @map("subcategory_id")
  fromAccountId    String?         @map("from_account_id")
  toAccountId      String?         @map("to_account_id")
  frequency        String
  startDate        DateTime        @map("start_date")
  endDate          DateTime?       @map("end_date")
  lastGeneratedDate DateTime?      @map("last_generated_date")
  isActive         Boolean         @default(true) @map("is_active")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory      Subcategory?    @relation(fields: [subcategoryId], references: [id])
  fromAccount      Account?        @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount        Account?        @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("recurring_transactions")
} 